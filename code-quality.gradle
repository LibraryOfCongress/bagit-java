//this build file is responsible for all the configuration of code quality items, such as code coverage, syntax style checking, static bug finding, etc.
apply plugin: "jacoco"
apply plugin: "findbugs"
apply plugin: "pmd"

sourceSets {
  integrationTest {
      java {
          compileClasspath += main.output + test.output
          runtimeClasspath += main.output + test.output
          srcDir file('src/integration/java')
      }
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
  description "Runs the integration tests."
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  testLogging.showStandardStreams = true
}

jacocoTestReport.dependsOn integrationTest //include the integration tests in the code coverage reports
jacocoTestReport.dependsOn test //ensure the tests have run before generating a coverage report

check.dependsOn integrationTest //run the integration tests
check.dependsOn jacocoTestReport //run the code coverage reports
check.dependsOn javadoc //ensure javadocs are generated correctly

//ignore some of the code quality checks for tests since you can't always follow the best practices when testing
findbugsIntegrationTest.enabled = false
findbugsTest.enabled = false

pmdIntegrationTest.enabled = false
pmdTest.enabled = false

pmd {
  ruleSets = [
    "java-basic", 
    "java-braces",
    "java-clone",
    "java-codesize",
    "java-design",
    "java-empty",
    "java-finalizers",
    "java-imports",
    "java-j2ee",
    "java-javabeans",
    "java-optimizations",
    "java-strictexception",
    "java-strings",
    "java-sunsecure",
    "java-typeresolution",
    "java-unnecessary",
    "java-unusedcode"
  ]
}

jacocoTestReport {
  reports {
      xml.enabled = true // coveralls plugin depends on xml format report
      html.enabled = true
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: ['gov.loc.repository.bagit/domain/**',
          'gov.loc.repository.bagit/annotation/**',
          'gov.loc.repository.bagit/exceptions/**'])
    })
  }
}

cpdCheck {
    source = sourceSets.main.allJava
    minimumTokenCount = 100
/*    reports {
        text.enabled = true
        xml.enabled = false
    }*/
}

dependencyCheck {
    skipTestGroups=true
    skipConfigurations=['findbugs','cpd'] //don't look for vulnerabilities in the build plugins
    outputDirectory="build/reports/OWASP"
    format="ALL"
    analyzers {
      archiveEnabled=false
      assemblyEnabled=false
      experimentalEnabled=false
      nuspecEnabled=false
      pathToMono=false
      zipExtensions=false
    }
}

//Keep this for easy viewing of html findbugs report
//tasks.withType(FindBugs) {
//  reports {
//      xml.enabled = false
//      html.enabled = true
//  }
//}