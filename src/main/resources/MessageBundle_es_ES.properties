#X-Generator: crowdin.com
#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=\u00bfSe permiten archivos de recuperaci\u00f3n? [{}]
serialization_allowed=Serializaci\u00f3n es\: [{}]
parsing_bagit_profile_info_section=An\u00e1lisis de la secci\u00f3n de informaci\u00f3n de perfil BagIt
identifier=Identificador es [{}]
source_organization=Organizaci\u00f3n de la fuente es [{}]
contact_name=Nombre del contacto es [{}]
contact_email=Email del contacto es [{}]
external_description=Descripci\u00f3n externa es [{}]
version=La versi\u00f3n es [{}]
parsing_bag_info=An\u00e1lisis de la secci\u00f3n de la bag-info
required_manifest_types=Requerido tipos manifestados {}
acceptable_serialization_mime_types=Tipos de serializaci\u00f3n MIME aceptable son {}
required_tagmanifest_types=Los tipos de Tagmanifest requeridos son {}
tag_files_required=Archivos de la etiqueta requeridos son {}
acceptable_bagit_versions=Versiones aceptables de bagit son {}

#for BagitWarning.java
bag_within_a_bag=Un directorio de data puede contener cualquier cosa, incluyendo otro bag. Sin embargo, ser\u00eda mejor fusionar bags juntas.
different_case=El bag contiene dos archivos que difieren s\u00f3lo en caso. Esto puede causar problemas con los archivos del sistema como el usado por apple (HFS).
different_normalization=El bag contiene dos archivos que difieren s\u00f3lo en la normalizaci\u00f3n. Esto puede causar que la verificaci\u00f3n falle en algunos sistemas, y confusi\u00f3n del usuario general.
extra_lines_in_bagit_files=Las especificaciones bagits dicen que s\u00f3lo deben contener 2 l\u00edneas. Sin embargo, algunas implementaciones han decidido ignorar esto lo que puede causar problemas de compatibilidad
leading_dot_slash=Un manifiesto lista todos los archivos de data como relativo al directorio ra\u00edz de bolsa, es in\u00fatil por lo tanto especificarlo con un punto.
non_standard_algorithm=El algoritmo de suma de comprobaci\u00f3n usado no viene de un est\u00e1ndar con una rutina de Java. Considera usar SHA512 en su lugar.
md5sum_tool_generated_manifest=El manifiesto fue creado usando utilidades de suma de comprobaci\u00f3n tales como las contenidas en el paquete GNU Coreutils (md5sum, sh1sum, etc), colectivamente referido aqu\u00ed como 'md5sum'. Esto crea peque\u00f1as diferencias en los manifestos generados lo que puede causar problemas en algunas implementaciones.
missing_tag_manifest=El manifiesto de etiqueta protege contra un manifiesto de carga truncada as\u00ed como otros problemas potenciales y siempre es recomendado que sea incluido.
old_bagit_version=La versi\u00f3n especificaci\u00f3n bagit no es la m\u00e1s nueva. Considera convertir a la \u00faltima versi\u00f3n.
os_specific_files=Archivos creados por el sistema operativo (SO) para su propio uso. Esos son no-portables a trav\u00e9s de la versiones SO y no deber\u00edan ser incluidas en ning\u00fan manifiesto. Ejemplos son Thumb.db en Windows o .DS_Store en OS X
payload_oxum_missing=Es recomendado siempre incluir la Carga-Oxum en el metadata bag debido a que permite para una "r\u00e1pida verificaci\u00f3n" del bag.
tag_files_encoding=Es recomendado siempre usar UTF-8.
weak_checksum_algorithm=El algoritmo de suma de verificaci\u00f3n usado es conocido por ser d\u00e9bil. Recomendamos usar SHA512.

#for BagLinter.java
checking_encoding_problems=Comprobando problemas de codificaci\u00f3n.
checking_latest_version=comprobando por la \u00faltima versi\u00f3n.
checking_manifest_problems=comprobando manifiestos por problemas.
checking_metadata_problems=comprobando metadata bag por problemas.
skipping_check_extra_lines=saltar verificaci\u00f3n de extra lineas en archivos bagit.
checking_extra_lines=comprobar si [{}] contiene m\u00e1s de dos l\u00edneas.
extra_lines_warning=La especificaciones bagit dice que el archivo bagit.txt debe contener exactamente 2 l\u00edneas. Sin embargo, encontramos [{}] l\u00edneas, algunas implementaciones ignorar\u00e1n esto pero puede causar problemas incompatibilidad con otras herramientas.

#for BagProfileChecker.java
checking_fetch_file_allowed=Checking if the fetch file is allowed for bag [{}].
checking_metadata_entry_required=Checking if [{}] is required in the bag metadata.
check_values_acceptable=Checking if all the values listed for [{}] are acceptable.
check_required_manifests_present=Checking if all the required manifests are present.
required_tag_manifest_type_not_present=Required tagmanifest type [{}] was not present. 
required_manifest_type_not_present=Required manifest type [{}] was not present. 
checking_required_tag_file_exists=Checking if all the required tag files exist.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=Version [{}] is not in the acceptable list of {}.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Profile specifies metadata field [{}] is required but was not found\!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Fetch File was found in bag [{}]

#for MetadataBalueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Profile specifies that acceptable values for [{}] are {} but found [{}]

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Required tag file [{}] was not found

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=Tag files are encoded with [{}]. We recommend always using UTF-8 instead.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=Bag [{}] does not contain a tag manifest, which is always recommended.
different_case_warning=In manifest [{}], path [{}] is the same as another path except for the case. This can cause problems if moving the bag to a filesystem that is case insensitive.
manifest_line_violated_spec_error=Manifest contains line [{}] which does not follow the specified form of <CHECKSUM> <PATH>
md5sum_generated_line_warning=Path [{}] starts with a *, which means it was generated with a non-bagit tool. It is recommended to remove the * in order to conform to the bagit specification.
cannot_access_parent_path_error=Could not access parent folder of [{}].
different_normalization_in_manifest_warning=File [{}] has a different normalization then what is specified in the manifest.
bag_within_bag_warning=We stronger recommend not storing a bag within a bag as it is known to cause problems.
leading_dot_slash_warning=In manifest [{}] line [{}] is a non-normalized path.
os_specific_files_warning=In manifest [{}] line [{}] contains a OS specific file.
weak_algorithm_warning=Detected a known weak algorithm [{}]. With the great advances in computer hardware there is little penalty to using more bits to calculate the checksum.
non_standard_algorithm_warning=Detected algorithm [{}] which is not included by default in Java. This will make it more difficult to read this bag on some systems. Consider changing it to SHA-512.

#for MetadataChecker.java
missing_payload_oxum_warning=The Payload-Oxum key was not found in the bag metadata. This will prevent a "quick verify".

#for VersionChecker.java
old_version_warning=Found version [{}] of the bagit specification but the latest version is [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=Skipping [{}] since we are ignoring hidden files.
skipping_ignored_directory=Skipping [{}] since we are ignoring hidden directories.

#for BagCreator.java
creating_bag=Creating a bag with version\: [{}] in directory\: [{}].
creating_payload_manifests=Creating payload manifest(s).
creating_tag_manifests=Creating tag manifest(s).
calculating_payload_oxum=Calculating the payload oxum of the data directory [{}].
creating_metadata_file=Creating the bag metadata file (bag-info.txt or package-info.txt).

#for Hasher.java
adding_checksum=Adding [{}] to manifest with hash [{}].

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] is not supported\!

#for BagitTextFileReader.java
reading_version_and_encoding=Reading [{}] for version and encoding.
bagit_version=BagIt-Version is [{}].
tag_file_encoding=Tag-File-Character-Encoding is [{}].
invalid_bagit_text_file_error=bagit.txt MUST contain 'BagIt-Version' AND 'Tag-File-Character-Encoding' entries\!
bom_present_error=File [{}] contains a byte order mark (BOM) which is not allowed by the bagit specification\!
strict_only_two_lines_error=The bagit.txt MUST only contain 2 lines. Extra lines found\: [{}]
strict_first_line_error=The first line of the bagit.txt must follow the pattern of\: [BagIt-Version\: <M.N>]. But found instead [{}]. See the specifcation for more information.
strict_second_line_error=The second line of the bagit.txt must follow the pattern of\: [Tag-File-Character-Encoding\: <ENCODING>]. But found instead [{}]. See the specifcation for more information.

#for UnparsableVersionException.java
unparsable_version_error=Version must be in format MAJOR.MINOR but was [{}]\!

#for FetchReader.java
reading_fetch_file=Attempting to read [{}].
read_fetch_file_line=Read URL [{}] length [{}] path [{}] from fetch file [{}].
invalid_fetch_file_line_error=The line [{}] is invalid for fetch.txt. Each line must take the form of <URL> <LENGTH> <FILENAME>.

#for KeyValueReader.java
read_key_value_line=Found key [{}] value [{}] in file [{}] using split regex [{}].
found_indented_line=Found an indented line - merging it with key [{}].
malformed_key_value_line_error=Line [{}] does not meet the bagit specification for a bag tag file. Perhaps you meant to indent it by a space or a tab? Or perhaps you didn't use a colon to separate the key from the value? It must follow the form of <key>{}<value> or if continuing from another line must be indented by a space or a tab.

#for ManifestReader.java
attempting_read_manifests=Attempting to find and read manifests.
found_tagmanifest=Found tag manifest [{}].
found_payload_manifest=Found payload manifest [{}].
reading_manifest=Reading manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Attempting to read bag metadata file.
found_metadata_file=Found metadata file [{}].

#for TagFileReader.java
removing_asterisk=Encountered path that was created by non-bagit tool. Removing * from path. Please remove all * from manifest files\!
blackslash_used_as_path_separator_error=[{}] is invalid due to the use of the path separactor [\\]\!
malicious_path_error=[{}] is trying to be malicious and access a file outside the bag\!
invalid_url_format_error=URL [{}] is invalid\!

#for BagVerifier.java
checking_bag_is_valid=Checking if the bag with root directory [{}] is valid.
checking_payload_checksums=Checking payload manifest(s) checksums.
checking_tag_file_checksums=Checking tag manifest(s) checksums.
checksums_not_matching_error=[{}] errors occured. At least one of the errors is due to hashes not matching.
checking_bag_is_complete=Checking if the bag with root directory [{}] is complete.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=File name [{}] has a different normalization than what is contained on the filesystem\!
error_reading_normalized_file=Error while trying to read [{}] to see if any files in that directory match the normalized filename of [{}]\!

#for CheckManifestHashesTask.java
checking_checksums=Checking file [{}] to see if checksum matches [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=File [{}] is suppose to have a [{}] hash of [{}] but was computed [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=File [{}] hash a size of [{}] bytes.

#for MandatoryVerifier.java
checking_fetch_items_exist=Checking if all [{}] items in fetch.txt exist in the [{}] directory.
fetch_item_missing_error=Fetch item [{}] has not been fetched\!
file_should_exist_error=File [{}] should exist but it doesn't\!
checking_payload_directory_exists=Checking if special payload directory exists (only for version 0.97 and earlier).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=Bag does not contain a payload manifest file\!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=File [{}] is in the payload directory but isn't listed in manifest manifest-{}.txt\!
file_in_all_manifests=[{}] is in all manifests.
file_not_in_any_manifest_error=File [{}] is in the payload directory but isn't listed in any manifest\!

#for PayloadVerifier.java
all_files_in_manifests=Getting all files listed in the manifest(s).
get_listing_in_manifest=Getting files and checksums listed in [{}].
check_all_files_in_manifests_exist=Checking if all files listed in the manifest(s) exist.
missing_payload_files_error=Manifest(s) contains file(s) {} but they don't exist\!
checking_file_in_at_least_one_manifest=Checking if all payload files (files in [{}] directory) are listed in at least one manifest.
checking_file_in_all_manifests=Checking if all payload files (files in [{}] directory) are listed in all manifests.

#for QuickVerifier.java
found_payload_oxum=Found payload-oxum [{}] for bag [{}].
payload_oxum_missing_error=Payload-Oxum does not exist in bag\!
parse_size_in_bytes=Parsing [{}] for the total byte size of the payload oxum.
parse_number_of_files=Parsing [{}] for the number of files to find in the payload directory.
compare_payload_oxums=supplied payload-oxum\: [{}], Calculated payload-oxum\: [{}.{}], for payload directory [{}].
invalid_total_size_error=Invalid total size. Expected [{}] but calculated [{}]\!
invalid_file_cound_error=Invalid file count. Expected [{}] but found [{}]\!

#for BagitFileWriter.java
write_bagit_file_to_path=Writing bagit.txt file to [{}]
writing_line_to_file=Writing line [{}] to [{}]

#for BagWriter.java
writing_payload_files=Writing payload files.
upsert_payload_oxum=Upserting payload-oxum.
writing_bagit_file=Writing the bagit.txt file.
writing_payload_manifests=Writing the payload manifest(s).
writing_bag_metadata=Writing the bag metadata.
writing_fetch_file=Writing the fetch file.
writing_tag_manifests=Writing the tag manifest(s).

#for FetchWriter.java
writing_fetch_file_to_path=Writing fetch.txt to [{}].

#for ManifestWriter.java
writing_manifest_to_path=Writing manifest to [{}].

#for MetadataWriter.java
writing_metadata_to_path=Writing bag metadata file [{}] to [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Writing payload file [{}] to [{}].
skip_fetch_item_when_writing_payload=Skipping payload file {} because it is in the fetch list.
