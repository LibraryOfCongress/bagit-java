#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=Sind Fetch Dateien erlaubt? [{}]
serialization_allowed=Serialisierung ist: [{}]
parsing_bagit_profile_info_section=Lese Abschnitt BagIt-Profile-Info 
identifier=Identifier hat den Wert [{}]
source_organization=Source-Organization hat den Wert [{}]
contact_name=Contact-Name hat den Wert [{}]
contact_email=Contact-Email hat den Wert [{}]
external_description=External-Description hat den Wert [{}]
version=Version hat den Wert [{}]
parsing_bag_info=Lese Abschnitt Bag-Info
required_manifest_types=Erforderliche Manifeste {}
acceptable_serialization_mime_types=Akzeptierte MIME Typen f\u00fcr die Serialisierung sind {}
required_tagmanifest_types=Erforderliche Tag Manifeste sind {}
tag_files_required=Erforderliche Tag Dateien sind {}
acceptable_bagit_versions=Akzeptierte bagit Versionen sind {}

#for BagitWarning.java
bag_within_a_bag=Das Verzeichnis data kann alles beinhalten, inklusive einer anderen bag. Es wird allerdings empfohlen, mehrere bags zusammenzufassen.
different_case=Eine bag kann mehrere Dateien mit unterschiedlicher Gro\u00df- und Kleinschreibung enthalten. Dies kann zu Problemen mit bestimmten Dateisystemen f\u00fchren, z.B. mit dem von Apple verwendeten HFS.
different_normalization=Eine bag kann mehrere Dateien mit unterschiedlicher Normalisierung enthalten. Dies kann bei einigen Dateisystemen zu Problemen bei der Verifizierung f\u00fchren und den Benutzer verwirren.
extra_lines_in_bagit_files=Laut bagit Spezifikation d\u00fcrfen nur 2 Zeilen enthalten sein. Dennoch haben sich einige Implementierungen daf\u00fcr entschieden dies zu ignorieren, was zu Kompatibilit\u00e4tsproblemen f\u00fchren kann.
leading_dot_slash=Eine Manifest Datei f\u00fchrt alle Dateien im Verzeichnis data relativ zum Wurzelverzeichnis der bag auf. Daher ist es nicht notwendig, die Dateipfade mit einem Punkt zu beginnen. 
non_standard_algorithm=Der verwendete Algorithmus zur Pr\u00fcfsummenberechnung ist nicht Teil der Standard Java Laufzeitumgebung. Die Verwendung von SHA512 wird empfohlen.
md5sum_tool_generated_manifest=Das Manifest wurde mit Hilfe von Werkzeugen zur Pr\u00fcfsummenberechnung erstellt, die z.B. Teil des GNU Coreutils Paketes sind (md5sum, sha1sum, etc.), hier als 'md5sum' bezeichnet. Diese erzeugen minimale Unterschiede in den erstellten Manifesten, was zu Problemen mit einigen Implementierungen f\u00fchren kann.
missing_tag_manifest=Das Tag Manifest verhindert unvollst\u00e4ndige Payload Manifeste sowie andere potentielle Probleme. Daher wird empfohlen, dass es Teil jeder bag ist.
old_bagit_version=Die verwendete Version der bagit Spezifikation ist veraltet. Es wird empfohlen, auf die aktuellste Version zu umzusteigen.
os_specific_files=Dateien die vom Betriebssystem f\u00fcr eigene Zwecke erzeugt wurden. Diese sind nicht zwischen verschiedenen Betriebssystemversionen portierbar und sollten nicht im Manifest aufgef\u00fchrt werden. Beispiele hierf\u00fcr sind Thumbs.db unter Windows oder .DS_Store unter OS X.
payload_oxum_missing=Es wird empfohlen, die Eigenschaft Payload-Oxum in den Metadaten jeder bag zu hinterlegen, da diese eine schnelle \u00dcberpr\u00fcfung der bag erlaubt.
tag_files_encoding=Es wird empfohlen UTF-8 zu verwenden.
weak_checksum_algorithm=Der verwendete Algorithmus zur Pr\u00fcfsummenerzeugung ist angreifbar. Wir empfehlen die Verwendung von SHA-512.

#for BagLinter.java
checking_encoding_problems=Pr\u00fcfe auf Probleme mit der Zeichenkodierung.
checking_latest_version=Pr\u00fcfe auf aktuellste Version.
checking_manifest_problems=Pr\u00fcfe Manifeste auf Probleme.
checking_metadata_problems=Pr\u00fcfe bag Metadaten auf Probleme.
skipping_check_extra_lines=\u00dcberspringe Pr\u00fcfung auf Extrazeilen in bagit Dateien.
checking_extra_lines=Pr\u00fcfe ob [{}] mehr als 2 Zeilen enth\u00e4lt.
extra_lines_warning=The bagit Spezifikation sagt aus, dass bagit.txt genau 2 Zeilen enthalten darf. Die vorliegende bagit.txt enth\u00e4lt [{}] Zeilen. Dies kann von einigen Implementierungen ignoriert werden oder zu Kombatibilit\u00e4tsproblemen f\u00fchren.

#for BagProfileChecker.java
checking_fetch_file_allowed=Pr\u00fcfe ob Fetch Dateien f\u00fcr die bag [{}] erlaubt sind.
checking_metadata_entry_required=Pr\u00fcfe ob [{}] in den bag Metadaten ben\u00f6tigt wird.
check_values_acceptable=Pr\u00fcfe ob alle f\u00fcr [{}] aufgef\u00fchrten Werte akzeptiert werden k\u00f6nnen.
check_required_manifests_present=Pr\u00fcfe ob alle ben\u00f6tigten Manifeste vorhanden sind.
required_tag_manifest_type_not_present=Ben\u00f6tigtes Tag Manifest vom Typ [{}] konnte nicht gefunden werden.
required_manifest_type_not_present=Ben\u00f6tigtes Manifest vom Typ [{}] konnte nicht gefunden werden. 
checking_required_tag_file_exists=Pr\u00fcfe ob alle Tag Dateien vorhanden sind.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=Version [{}] ist nicht in der Liste der akzeptieren Versionen {}.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Das im Profil auf\u00fchrte Metadatum [{}] ist notwendig, wurde aber nicht gefunden!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Fetch Datei konnte nicht in der bag [{}] gefunden werden.

#for MetadataBalueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Laut Profil sind g\u00fcltige Werte f\u00fcr die Eigenschaft [{}]: {}. Der aufgef\u00fchrte Wert [{}] befindet sich nicht darunter.

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Die ben\u00f6tigte Tag Datei [{}] konnte nicht gefunden werden.

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=Tag Dateien sind [{}] kodiert. Wir empfehlen stattdessen die Verwendung von UTF-8.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=Die bag [{}] enth\u00e4lt kein Tag Manifest, welches f\u00fcr jede bag empfohlen wird.
different_case_warning=Im Manifest [{}] wird der Pfad [{}] mit unterschiedlicher Gro\u00df- und Kleinschreibung aufgef\u00fchrt. Dies kann bei einigen Dateisystemen zu Problemen f\u00fchren.
manifest_line_violated_spec_error=Das Manifest enth\u00e4lt die Zeile [{}], welche nicht dem geforderten Schema <PR\u00dcFSUMME> <PFAD> folgt.
md5sum_generated_line_warning=Der Pfad [{}] beginnt mit einem *, was bedeutet, dass der Eintrag nicht mit einem bagit-Werkzeug erstellt wurde. Es wird empfohlen, den * entsprechend der bagit Spezifikation zu entfernen.
cannot_access_parent_path_error=Zugriff auf \u00fcbergeordnetes Verzeichnis von [{}] nicht m\u00f6glich.
different_normalization_in_manifest_warning=Die Datei [{}] ist anders normalisiert f\u00fcr die Manifest Datei erforderlich.
bag_within_bag_warning=Wir empfehlen keine bag innerhalb einer anderen bag zu speichern, da dies bekannterma\u00dfen zu Problemen f\u00fchren kann.
leading_dot_slash_warning=Manifest [{}] enth\u00e4lt in Zeile [{}] einen nicht normalisierten Pfad.
os_specific_files_warning=Manifest [{}] enth\u00e4lt in Zeile [{}] eine betriebssystemspezifische Datei.
weak_algorithm_warning=Pr\u00fcfsummenalgorithmus [{}] ist als angreifbar bekannt. Dank der Fortschritte aktueller Computersysteme verursacht die Erzeugung einer st\u00e4rkeren Pr\u00fcfsumme nur minimale Verz\u00f6gerung.
non_standard_algorithm_warning=Der verwendete Pr\u00fcfsummenalgorithmus [{}] ist nicht Teil der Standard Java Laufzeitumgebung. Dies erschwert das Lesen der bag auf einigen Systemen. Die Verwendung von SHA-512 wird empfohlen.

#for MetadataChecker.java
missing_payload_oxum_warning=Die Eigenschaft Payload-Oxum wurde nicht in den bag Metadaten gefunden. Dies verhindert eine schnelle \u00dcberpr\u00fcfung der bag.

#for VersionChecker.java
old_version_warning=Die verwendete bagit Version [{}] ist veraltet. Die akuelle Version ist [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=\u00dcberspringe [{}] da versteckte Dateien ignoriert werden.
skipping_ignored_directory=\u00dcberspringe [{}] da versteckte Verzeichnisse ignoriert werden.

#for BagCreator.java
creating_bag=Erstelle bag in Version: [{}] im Verzeichnis: [{}].
creating_payload_manifests=Erstelle Payload Manifest(e).
creating_tag_manifests=Erstelle Tag Manifest(e).
calculating_payload_oxum=Berechne Payload Oxum des Datenverzeichnisses [{}].
creating_metadata_file=Erstelle bag Metadaten (bag-info.txt oder package-info.txt).

#for Hasher.java
adding_checksum=F\u00fcge dem Manifest den Eintrag [{}] mit Pr\u00fcfsumme [{}] hinzu.

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] wird nicht unterst\u00fctzt!

#for BagitTextFileReader.java
reading_version_and_encoding=Lese [{}] f\u00fcr die Bestimmung von Version und Zeichenkodierung.
bagit_version=BagIt-Version ist [{}].
tag_file_encoding=Zeichenkodierung in Tag Datei ist [{}].
invalid_bagit_text_file_error=bagit.txt MUSS die Eigenschaften 'BagIt-Version' UND 'Tag-File-Character-Encoding' enthalten!
bom_present_error=Datei [{}] enth\u00e4lt eine Byte-Reihenfolge-Markierung, was laut bagit Spezifikation nicht zul\u00e4ssig ist!
strict_only_two_lines_error=bagit.txt MUSS genau 2 Zeilen enthalten. Zus\u00e4tzliche gefundene Zeile(n): [{}]
strict_first_line_error=Die erste Zeile in bagit.txt muss dem Schema [BagIt-Version: <M.N>] entsprechen. Stattdessen wurde die Zeile [{}] gefunden. Mehr Informationen findet man in der bagit Spezifikation.
strict_second_line_error=Die zweite Zeile in bagit.txt muss dem Schema [Tag-File-Character-Encoding: <ENCODING>] entsprechen. Stattdessen wurde die Zeile [{}] gefunden. Mehr Informationen findet man in der bagit Spezifikation.

#for UnparsableVersionException.java
unparsable_version_error=Version muss im Format MAJOR.MINOR angegeben werden. Stattdessen wurde der Wert [{}] gefunden.

#for FetchReader.java
reading_fetch_file=Versuche [{}] zu lesen.
read_fetch_file_line=Lese URL [{}] mit L\u00e4nge [{}] und Pfad [{}] aus Fetch Datei [{}].
invalid_fetch_file_line_error=Zeile [{}] ist kein g\u00fcltiger fetch.txt Eintrag. Jede Zeile muss nach dem Schema <URL> <L\u00c4NGE> <DATEINAME> aufgebaut sein.

#for KeyValueReader.java
read_key_value_line=Schl\u00fcssel [{}] mit Wert [{}] in Datei [{}] gefunden. Verwende regul\u00e4ren Ausdruck [{}] f\u00fcr die Aufspaltung.
found_indented_line=Einger\u00fcckte Zeile gefunden - f\u00fcge sie mit Schl\u00fcssel [{}] zusammen.
malformed_key_value_line_error=Zeile [{}] entspricht nicht der bagit Spezifikation f\u00fcr eine Tag Datei. M\u00f6glicherweise sollte die Zeile per Leerzeichen oder Tab einger\u00fcckt werden oder es wurde kein Doppelpunkt verwendet, um einen Schl\u00fcssel von einem Wert zu trennen? Es muss das Schema <Schl\u00fcssel>{}<Wert> verwendet werden. Falls ein Wert in einer neuen Zeile fortgesetzt wird, muss diese per Leerzeichen oder Tab einger\u00fcckt werden.

#for ManifestReader.java
attempting_read_manifests=Versuche die Manifeste zu finden und zu lesen.
found_tagmanifest=Tag Manifest [{}] gefunden.
found_payload_manifest=Payload Manifest [{}] gefunden.
reading_manifest=Lese Manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Versuche bag Metadaten Datei zu lesen.
found_metadata_file=Metadaten Datei [{}] gefunden.

#for TagFileReader.java
removing_asterisk=Es wurde ein Pfad gefunden, der nicht mit einem bagit-Werkzeug erstellt wurde. Alle *  werden aus dem Pfad entfernt. Bitte entfernen Sie auch alle * aus den Manifesten!
blackslash_used_as_path_separator_error=[{}] ist ung\u00fcltig, da zur Pfadtrennung [\\] verwendet wird!
malicious_path_error=[{}] verweist ung\u00fcltigerweise auf eine Datei au\u00dferhalb der bag!
invalid_url_format_error=URL [{}] is ung\u00fcltig!

#for BagVerifier.java
checking_bag_is_valid=Pr\u00fcfe ob die bag mit dem Wurzelverzeichnis [{}] g\u00fcltig ist.
checking_payload_checksums=Pr\u00fcfe Pr\u00fcfsummen der/des Payload Manifeste(s).
checking_tag_file_checksums=Pr\u00fcfe Pr\u00fcfsummen der/des Tag Manifeste(s).
checksums_not_matching_error=[{}] Fehler gefunden. Mindestens ein Fehler ist auf fehlerhafte Pr\u00fcfsummen zur\u00fcckzuf\u00fchren.
checking_bag_is_complete=Pr\u00fcfe ob die bag mit dem Wurzelverzeichnis [{}] vollst\u00e4ndig ist.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=Der Dateiname [{}] verwendet eine andere Normalisierung als das unterliegende Dateisystem!
error_reading_normalized_file=Fehler beim Zugriff auf [{}], um zu pr\u00fcfen, ob eine Datei in diesem Verzeichnis dem normalisierten Dateinamen [{}] entspricht!

#for CheckManifestHashesTask.java
checking_checksums=Pr\u00fcfe Datei [{}] auf Pr\u00fcfsumme [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=Datei [{}] sollte eine [{}] Pr\u00fcfsumme mit dem Wert [{}] aufweisen. Die errechnete Pr\u00fcfsumme ist jedoch [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=Datei [{}] hat eine Gr\u00f6\u00dfe von [{}] Byte.

#for MandatoryVerifier.java
checking_fetch_items_exist=Pr\u00fcfe ob alle [{}] Eintr\u00e4ge in fetch.txt im Verzeichnis [{}] existieren.
fetch_item_missing_error=Fetch Eintrag [{}] wurde nicht geladen!
file_should_exist_error=Datei [{}] sollte existieren, tut es aber nicht!
checking_payload_directory_exists=Pr\u00fcfe ob ein spezielles Payload Verzeichnis existiert (nur Version 0.97 und \u00e4lter).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=Bag enth\u00e4lt kein Payload Manifest!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=Datei [{}] befindet sich im Payload Verzeichnis, ist aber nicht im Manifest manifest-{}.txt aufgef\u00fchrt!
file_in_all_manifests=[{}] befindet sich in allen Manifesten.
file_not_in_any_manifest_error=Datei [{}] befindet sich im Payload Verzeichnis, ist aber in keinem Manifest aufgef\u00fchrt!

#for PayloadVerifier.java
all_files_in_manifests=Lese alle Dateien aus allen Manifesten.
get_listing_in_manifest=Lese Dateien und Pr\u00fcfsummen die in [{}] aufgef\u00fchrt sind.
check_all_files_in_manifests_exist=Pr\u00fcfe ob alle Dateien aus allen Manifesten existieren.
missing_payload_files_error=Manifeste enthalten Datei(en) {} die nicht existieren!
checking_file_in_at_least_one_manifest=Pr\u00fcfe ob alle Payload Dateien (Dateien im Verzeichnis [{}]) in mindestens einem Manifest aufgef\u00fchrt sind.
checking_file_in_all_manifests=Pr\u00fcfe ob alle Payload Dateien (Dateien im Verzeichnis [{}]) in allen Manifesten aufgef\u00fchrt sind.

#for QuickVerifier.java
found_payload_oxum=Eigenschaft Payload-Oxum [{}] f\u00fcr bag [{}] gefunden.
payload_oxum_missing_error=Eigenschaft Payload-Oxum nicht in den bag metadaten gefunden!
parse_size_in_bytes=Suche in Wert [{}] nach der Gesamtanzahl an Bytes.
parse_number_of_files=Suche in Wert [{}] nach der Gesamtanzahl an Dateien im Payload Verzeichnis.
compare_payload_oxums=Angegebener Wert der Eigenschaft Payload-Oxum : [{}], berechneter Wert von Payload-Oxum : [{}.{}] f\u00fcr das Payload Verzeichnis [{}].
invalid_total_size_error=Ung\u00fcltige Gesamtanzahl an Bytes. Ertwartet wurde [{}], berechnet wurde [{}]!
invalid_file_cound_error=Ung\u00fcltige Gesamtanzahl an Dateien. Erwartet wurde [{}], berechnet wurde [{}]!

#for BagitFileWriter.java
write_bagit_file_to_path=Schreibe bagit.txt nach [{}]
writing_line_to_file=Schreibe Zeile [{}] nach [{}]

#for BagWriter.java
writing_payload_files=Schreibe Payload Dateien.
upsert_payload_oxum=F\u00fcge Eigenschaft Payload-Oxum hinzu.
writing_bagit_file=Schreibe Datei bagit.txt .
writing_payload_manifests=Schreibe das/die Payload Manifest(e).
writing_bag_metadata=Schreibe bag Metadaten.
writing_fetch_file=Schreibe Fetch Datei.
writing_tag_manifests=Schreibe Tag Manifest(e).

#for FetchWriter.java
writing_fetch_file_to_path=Schreibe fetch.txt nach [{}].

#for ManifestWriter.java
writing_manifest_to_path=Schreibe Manifest nach [{}].

#for MetadataWriter.java
writing_metadata_to_path=Schreibe bag Metdaten Datei [{}] nach [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Schreibe Payload Datei [{}] nach [{}].
skip_fetch_item_when_writing_payload=\u00dcberspringe Payload Datei {} da sie sich in der Fetch Liste befindet.