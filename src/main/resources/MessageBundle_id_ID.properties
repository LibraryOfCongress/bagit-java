#X-Generator: crowdin.com
#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=Apakah diperbolehkan untuk mengambil berkas? [{}]
serialization_allowed=Serialisasi adalah\: [{}]
parsing_bagit_profile_info_section=Parsing the BagIt-Profile-Info section
identifier=Identifier is [{}]
source_organization=Source-Organization is [{}]
contact_name=Contact-Name is [{}]
contact_email=Contact-Email is [{}]
external_description=External-Description is [{}]
version=Version is [{}]
parsing_bag_info=Parsing the Bag-Info section
required_manifest_types=Required manifest types {}
acceptable_serialization_mime_types=Acceptable serialization MIME types are {}
required_tagmanifest_types=Required Tag Manifest types are {}
tag_files_required=Tag files required are {}
acceptable_bagit_versions=Acceptable bagit versions are {}

#for BagitWarning.java
bag_within_a_bag=A data directory can contain anything, including another bag. However it would be better to merge the bags together.
different_case=The bag contains two files that differ only in case. This can cause problems on a filesystem like the one used by apple (HFS).
different_normalization=The bag contains two files that differ only in the normalization. This can cause verification to fail on some systems, and general user confusion.
extra_lines_in_bagit_files=The Bagit specification says it must only contain 2 lines. However, some implementations have decided to ignore this which may cause compatibility issues
leading_dot_slash=A manifest lists all data files as relative to the bag root directory, it is superfluous to therefore specify it with a dot.
non_standard_algorithm=The checksum algorithm used does not come standard with the Java runtime. Consider using SHA-512 instead.
md5sum_tool_generated_manifest=The manifest was created using checksum utilities such as those contained in the GNU Coreutils package (md5sum, sha1sum, etc.), collectively referred to here as 'md5sum'. This creates slight differences in generated manifests that can cause problems in some implementations.
missing_tag_manifest=The tag manifest guards against a truncated payload manifest as well as other potential problems and is always recommended that it be included.
old_bagit_version=The Bagit specification version is not the newest. Consider converting to the latest version.
os_specific_files=Files created by the operating system (OS) for its own use. They are non-portable across OS versions and should not be included in any manifest. Examples Thumbs.db on Windows or .DS_Store on OS X
payload_oxum_missing=It is recommended to always include the Payload-Oxum in the bag metadata since it allows for a 'quick verification' of the bag.
tag_files_encoding=It is recommended to always use UTF-8.
weak_checksum_algorithm=The checksum algorithm used is known to be weak. We recommend using SHA-512.
manifest_file_sets_differ_between_algorithms=As of bagit version 1.0 it is recommended that all payload manifests contain the same set of files as other payload manifests. It is also recommended that all tag manifests contain the same set of files as other tag manifests.

#for BagLinter.java
checking_encoding_problems=Checking encoding problems.
checking_latest_version=Checking for latest version.
checking_manifest_problems=Checking manifests for problems.
checking_metadata_problems=Checking bag metadata for problems.
skipping_check_extra_lines=Skipping check for extra lines in bagit files.
checking_extra_lines=Checking if [{}] contains more than 2 lines.
extra_lines_warning=The Bagit specification states that the bagit.txt file must contain exactly 2 lines. However we found [{}] lines, some implementations will ignore this but may cause incompatibility issues with other tools.

#for BagProfileChecker.java
checking_fetch_file_allowed=Checking if the fetch file is allowed for bag [{}].
checking_metadata_entry_required=Checking if [{}] is required in the bag metadata.
check_values_acceptable=Checking if all the values listed for [{}] are acceptable.
check_required_manifests_present=Checking if all the required manifests are present.
required_tag_manifest_type_not_present=Required tag manifest type [{}] was not present. 
required_manifest_type_not_present=Required manifest type [{}] was not present. 
checking_required_tag_file_exists=Checking if all the required tag files exist.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=Version [{}] is not in the acceptable list of {}.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Profile specifies metadata field [{}] is required but was not found\!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Berkas yang telah diambil ditemukan di dalam tas [{}]\!

#for MetadataValueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Profile specifies that acceptable values for [{}] are {} but found [{}]\!

#for MetadataValueIsNotRepeatableException.java
metadata_value_not_repeatable_error=Profile specifies that value [{}] is not repeatable, but was listed multiple times\!

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Required tag file [{}] was not found\!

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=Tag files are encoded with [{}]. We recommend always using UTF-8 instead.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=Bag [{}] does not contain a tag manifest. It is recommended to always include a tag manifest.
different_case_warning=In manifest [{}], path [{}] is the same as another path except for the case. This can cause problems if moving the bag to a filesystem that is case insensitive.
manifest_line_violated_spec_error=Manifest contains line [{}] which does not follow the specified form of <CHECKSUM> <PATH>
md5sum_generated_line_warning=Path [{}] starts with a *, which means it was generated with a non-bagit tool. It is recommended to remove the * in order to conform to the Bagit specification.
cannot_access_parent_path_error=Folder utama tidak bisa di akses dari [{}].
different_normalization_in_manifest_warning=File [{}] has a different normalization than what is specified in the manifest.
bag_within_bag_warning=We strongly recommend not storing a bag within a bag as it is known to cause problems.
leading_dot_slash_warning=In manifest [{}] line [{}] is a non-normalized path.
os_specific_files_warning=In manifest [{}] line [{}] contains a OS specific file.
weak_algorithm_warning=Detected a known weak algorithm [{}]. With the great advances in computer hardware there is little penalty to using more bits to calculate the checksum.
non_standard_algorithm_warning=Detected algorithm [{}] which is not included by default in Java. This will make it more difficult to read this bag on some systems. Consider changing it to SHA-512.
manifest_fileset_differ=Manifest [{}] does not contain the same set of files as manifest [{}], it is recommended that they be the same.

#for MetadataChecker.java
missing_payload_oxum_warning=The Payload-Oxum key was not found in the bag metadata. This will prevent a "quick verify".

#for VersionChecker.java
old_version_warning=Found version [{}] of the Bagit specification but the latest version is [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=Skipping [{}] since we are ignoring hidden files.
skipping_ignored_directory=Skipping [{}] since we are ignoring hidden directories.

#for BagCreator.java
creating_bag=Creating a bag with version\: [{}] in directory\: [{}].
creating_payload_manifests=Creating payload manifest(s).
creating_tag_manifests=Creating tag manifest(s).
calculating_payload_oxum=Calculating the payload oxum of the data directory [{}].
creating_metadata_file=Creating the bag metadata file (bag-info.txt or package-info.txt).

#for Hasher.java
adding_checksum=Adding [{}] to manifest with hash [{}].

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] is not supported\!

#for BagitTextFileReader.java
reading_version_and_encoding=Reading [{}] for version and encoding.
bagit_version=BagIt-Version is [{}].
tag_file_encoding=Tag-File-Character-Encoding is [{}].
invalid_bagit_text_file_error=bagit.txt MUST contain 'BagIt-Version' AND 'Tag-File-Character-Encoding' entries\!
bom_present_error=File [{}] contains a byte order mark (BOM) which is not allowed by the bagit specification\!
strict_only_two_lines_error=The bagit.txt MUST only contain 2 lines. Extra lines found\: [{}]
strict_first_line_error=The first line of the bagit.txt must follow the pattern of\: [BagIt-Version\: <M.N>]. But found instead [{}]. See the specification for more information.
strict_second_line_error=The second line of the bagit.txt must follow the pattern of\: [Tag-File-Character-Encoding\: <ENCODING>]. But found instead [{}]. See the specification for more information.

#for UnparsableVersionException.java
unparsable_version_error=Version must be in format MAJOR.MINOR but was [{}]\!

#for FetchReader.java
reading_fetch_file=Attempting to read [{}].
read_fetch_file_line=Read URL [{}] length [{}] path [{}] from fetch file [{}].
invalid_fetch_file_line_error=The line [{}] is invalid for fetch.txt. Each line must take the form of <URL> <LENGTH> <FILENAME>.

#for KeyValueReader.java
read_key_value_line=Found key [{}] value [{}] in file [{}] using split regex [{}].
found_indented_line=Found an indented line - merging it with key [{}].
malformed_key_value_line_error=Line [{}] does not meet the Bagit specification for a bag tag file. Perhaps you meant to indent it by a space or a tab? Or perhaps you didn't use a colon to separate the key from the value? It must follow the form of <key>{}<value> or if continuing from another line must be indented by a space or a tab.

#for ManifestReader.java
attempting_read_manifests=Attempting to find and read manifests.
found_tagmanifest=Found tag manifest [{}].
found_payload_manifest=Found payload manifest [{}].
reading_manifest=Reading manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Attempting to read bag metadata file.
found_metadata_file=Found metadata file [{}].

#for TagFileReader.java
removing_asterisk=Encountered path that was created by non-bagit tool. Removing * from path. Please remove all * from manifest files\!
blackslash_used_as_path_separator_error=[{}] is invalid due to the use of the path separator [\\]\!
malicious_path_error=[{}] is trying to be malicious and access a file outside the bag\!
invalid_url_format_error=URL [{}] Tidak cocok\!

#for BagVerifier.java
checking_bag_is_valid=Checking if the bag with root directory [{}] is valid.
checking_payload_checksums=Checking payload manifest(s) checksums.
checking_tag_file_checksums=Checking tag manifest(s) checksums.
checksums_not_matching_error=[{}] errors occurred. At least one of the errors is due to hashes not matching.
checking_bag_is_complete=Checking if the bag with root directory [{}] is complete.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=File name [{}] has a different normalization than what is contained on the filesystem\!
error_reading_normalized_file=Error while trying to read [{}] to see if any files in that directory match the normalized filename of [{}]\!

#for CheckManifestHashesTask.java
checking_checksums=Checking file [{}] to see if checksum matches [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=File [{}] is suppose to have a [{}] hash of [{}] but was computed [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=File [{}] has a size of [{}] bytes.

#for MandatoryVerifier.java
checking_fetch_items_exist=Checking if all [{}] items in fetch.txt exist in the [{}] directory.
fetch_item_missing_error=Fetch item [{}] has not been fetched\!
file_should_exist_error=File [{}] should exist but it doesn't\!
checking_payload_directory_exists=Checking if special payload directory exists (only for version 0.97 and earlier).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=Bag does not contain a payload manifest file\!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=File [{}] is in the payload directory but isn't listed in manifest manifest-{}.txt\!
file_in_all_manifests=[{}] is in all manifests.
file_not_in_any_manifest_error=File [{}] is in the payload directory but isn't listed in any manifest\!

#for PayloadVerifier.java
all_files_in_manifests=Getting all files listed in the manifest(s).
get_listing_in_manifest=Getting files and checksums listed in [{}].
check_all_files_in_manifests_exist=Checking if all files listed in the manifest(s) exist.
missing_payload_files_error=Manifest(s) contains file(s) {} but they don't exist\!
checking_file_in_at_least_one_manifest=Checking if all payload files (files in [{}] directory) are listed in at least one manifest.
checking_file_in_all_manifests=Checking if all payload files (files in [{}] directory) are listed in all manifests.

#for QuickVerifier.java
found_payload_oxum=Found Payload-Oxum [{}] for bag [{}].
payload_oxum_missing_error=Payload-Oxum does not exist in bag\!
parse_size_in_bytes=Parsing [{}] for the total byte size of the Payload Oxum.
parse_number_of_files=Parsing [{}] for the number of files to find in the payload directory.
compare_payload_oxums=Supplied payload-oxum\: [{}], Calculated Payload-Oxum\: [{}.{}], for payload directory [{}].
invalid_total_size_error=Invalid total size. Expected [{}] but calculated [{}]\!
invalid_file_cound_error=Invalid file count. Expected [{}] but found [{}]\!

#for BagitFileWriter.java
write_bagit_file_to_path=Writing bagit.txt file to [{}]
writing_line_to_file=Writing line [{}] to [{}]

#for BagWriter.java
writing_payload_files=Writing payload files.
upsert_payload_oxum=Upserting Payload-Oxum.
writing_bagit_file=Writing the bagit.txt file.
writing_payload_manifests=Writing the payload manifest(s).
writing_bag_metadata=Writing the bag metadata.
writing_fetch_file=Writing the fetch file.
writing_tag_manifests=Writing the tag manifest(s).

#for FetchWriter.java
writing_fetch_file_to_path=Writing fetch.txt to [{}].

#for ManifestWriter.java
writing_manifest_to_path=Writing manifest to [{}].

#for MetadataWriter.java
writing_metadata_to_path=Writing bag metadata file [{}] to [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Writing payload file [{}] to [{}].
skip_fetch_item_when_writing_payload=Skipping payload file {} because it is in the fetch list.

