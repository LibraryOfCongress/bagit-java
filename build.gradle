plugins {
  id 'java'
  id 'project-report'

  //these have to be in the main project for now see - https://discuss.gradle.org/t/how-do-i-include-buildscript-block-from-external-gradle-script/7016/2
  id "com.github.kt3k.coveralls" version "2.8.2" 
  id "de.aaschmid.cpd" version "3.3"
  id "org.owasp.dependencycheck" version "3.2.1"
//  id "com.dorongold.task-tree" version "1.3"
  id "org.ajoberstar.grgit" version "2.2.1"
  id "com.github.spotbugs" version "5.0.13"
  id "com.jfrog.bintray" version "1.8.2"
}
apply from: 'eclipse.gradle'
apply from: 'bintray.gradle'
// requires migration to maven-publish plugin
// apply from: 'maven-central.gradle'
apply from: 'code-quality.gradle'
apply from: 'message-bundle.gradle'

sourceCompatibility = 11
targetCompatibility = 11

if (project.version == "unspecified") {
  String now = new Date().format( 'MMM-dd-yyyy_HH-mm-ss' )
  project.version = "5.0.0-${now}-SNAPSHOT"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.25',
    'com.fasterxml.jackson.core:jackson-core:2.9.0.pr4',
    'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr4'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0',
    'org.springframework.boot:spring-boot-starter-logging:1.5.4.RELEASE',
    'org.bouncycastle:bcprov-jdk15on:1.57',
    'org.kamranzafar:jtar:2.3',
    'org.junit.jupiter:junit-jupiter-engine:5.2.0'

  testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0',
    'org.springframework.boot:spring-boot-starter-logging:1.5.4.RELEASE',
    'org.bouncycastle:bcprov-jdk15on:1.57',
    'org.kamranzafar:jtar:2.3'

  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

spotbugs {
  toolVersion = '4.2.1'
}

test { 
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  reports {
    html.required = true
  }
  //testLogging.showStandardStreams = true
}

spotbugsMain {
  reports {
      xml.required = false
      html.required = true
  }
}

import org.ajoberstar.grgit.*
task cloneConformanceSuite(){
  group "Verification"
  description "Download the bagit-conformance-suite if it doesn't exist."
  File location = file("${project.projectDir}/bagit-conformance-suite")
  outputs.dir(location)
  
  onlyIf { !location.exists() }
  doLast{
      Grgit.clone(dir: location, 
                  uri: 'https://github.com/libraryofcongress/bagit-conformance-suite.git')
    }
}
